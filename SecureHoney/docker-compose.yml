version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: securehoney-db
    environment:
      POSTGRES_DB: securehoney
      POSTGRES_USER: securehoney
      POSTGRES_PASSWORD: securehoney123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./admin-panel/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./shared-utils/database/postgresql_types.sql:/docker-entrypoint-initdb.d/00-types.sql
      - ./docker/init-scripts:/docker-entrypoint-initdb.d/scripts
    ports:
      - "5432:5432"
    networks:
      - securehoney-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securehoney -d securehoney"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: securehoney-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - securehoney-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Honeypot Engine
  honeypot:
    build:
      context: .
      dockerfile: docker/Dockerfile.honeypot
    container_name: securehoney-honeypot
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=securehoney
      - DB_USER=securehoney
      - DB_PASSWORD=securehoney123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    ports:
      - "2222:2222"  # SSH Honeypot
      - "8080:8080"  # HTTP Honeypot
      - "2121:2121"  # FTP Honeypot
      - "2323:2323"  # Telnet Honeypot
    volumes:
      - ./logs:/app/logs
      - ./honeypot-system/config:/app/config
    networks:
      - securehoney-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 2222)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel Backend
  admin-backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.admin-backend
    container_name: securehoney-admin-backend
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=securehoney
      - DB_USER=securehoney
      - DB_PASSWORD=securehoney123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80
      - LOG_LEVEL=INFO
    ports:
      - "5001:5001"
    volumes:
      - ./logs:/app/logs
      - ./admin-panel/backend/config:/app/config
    networks:
      - securehoney-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel Frontend
  admin-frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.admin-frontend
    container_name: securehoney-admin-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5001/api
      - REACT_APP_WS_URL=ws://localhost:5001/ws
      - REACT_APP_ENV=production
    ports:
      - "3000:80"
    networks:
      - securehoney-network
    depends_on:
      - admin-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: securehoney-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - securehoney-network
    depends_on:
      - admin-frontend
      - admin-backend
    restart: unless-stopped
    profiles:
      - production

  # Log Aggregator (Optional)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: securehoney-logstash
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/app/logs:ro
    networks:
      - securehoney-network
    depends_on:
      - database
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  securehoney-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
