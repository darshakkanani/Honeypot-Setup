version: '3.8'

services:
  # Main HoneyPort Application
  honeyport:
    build: .
    container_name: honeyport-main
    ports:
      - "5000:5000"   # Dashboard
      - "8080:8080"   # HTTP Honeypot
      - "8443:8443"   # HTTPS Honeypot
      - "2222:2222"   # SSH Honeypot
      - "3000:3000"   # Attacker Site
    environment:
      - DATABASE_URL=postgresql://honeyport:honeyport_pass@postgres:5432/honeyport
      - REDIS_URL=redis://redis:6379/0
      - BLOCKCHAIN_ENABLED=true
      - AI_ENABLED=true
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml:ro
    depends_on:
      - postgres
      - redis
      - ganache
    networks:
      - honeyport-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: honeyport-postgres
    environment:
      POSTGRES_DB: honeyport
      POSTGRES_USER: honeyport
      POSTGRES_PASSWORD: honeyport_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - honeyport-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: honeyport-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - honeyport-network
    restart: unless-stopped

  # Ganache for local blockchain
  ganache:
    image: trufflesuite/ganache:latest
    container_name: honeyport-ganache
    ports:
      - "8545:8545"
    command: >
      ganache
      --host 0.0.0.0
      --port 8545
      --networkId 1337
      --accounts 10
      --deterministic
      --mnemonic "your twelve word mnemonic phrase here for deterministic accounts"
    networks:
      - honeyport-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: honeyport-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - honeyport-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: honeyport-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - honeyport-network
    restart: unless-stopped

  # ELK Stack for log analysis
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: honeyport-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - honeyport-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: honeyport-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - honeyport-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: honeyport-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - honeyport
    networks:
      - honeyport-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  honeyport-network:
    driver: bridge
